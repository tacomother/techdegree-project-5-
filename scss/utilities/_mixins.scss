
@mixin themes($map) {
  @each $theme, $color in $map {
        &--#{$theme} {
          background-color: $color;
        }
  }
}

// BEM selectors

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Create a flex container

@mixin flexy(
  $disp: flex,
  $dir: null,
  $wrap: null,
  $just: null) {
  display: $disp;
  flex-direction: $dir;
  flex-wrap: $wrap;
  justify-content: $just;
}

// Media queries

@mixin mq($break) {
  @if $break == 'sm' {
    @media (min-width: $brk--sm) and (max-width: $brk--med) {
      @content;
    }
  }
  @else if $break == 'med' {
    @media (min-width: $brk--med + 1) {
      @content;
    }
  }
}

// Columns

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate and output the column modifier classes
    &--#{$i} {
      flex-basis: percentage($target / $context);
    }
  }
}

@mixin doubly($margin: 1em) {
  & + & {
   margin-left: $margin;
   @content;
  }
}

// UI Colors

@mixin ui-colors($map, $p-el:null) {
  @each $theme, $color in $map {
    @include m($theme) {
      background-color: $color;
      @if $p-el {
        &:after {
          background-color: lighten($color, 15%);
        }
      }
    }
  }
}
